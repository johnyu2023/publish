import{_ as t,C as c,c as e,o,G as s,w as u,j as l,a as n}from"./chunks/framework.BX-G93LU.js";const r="/publish/assets/function-calling.CU5zVjik.png",C="/publish/assets/function-calling-call-function.CBp41qYe.png",g="/publish/assets/mcp-vs-function-calling-01.BrB0dwEe.gif",p="/publish/assets/mcp-architecture.D_RIOeLD.webp",h="/publish/assets/mcp-before-after.DVJr1MZ6.png",x=JSON.parse('{"title":"Function Calling vs MCP","description":"Function Calling 和 MCP 的关系和区别","frontmatter":{"date":"2025-08-19T00:00:00.000Z","title":"Function Calling vs MCP","description":"Function Calling 和 MCP 的关系和区别"},"headers":[],"relativePath":"ai/function-calling-vs-mcp.md","filePath":"ai/function-calling-vs-mcp.md"}'),P={name:"ai/function-calling-vs-mcp.md"};function d(m,a,M,_,f,F){const i=c("BlogPost");return o(),e("div",null,[s(i,null,{default:u(()=>a[0]||(a[0]=[l("h1",{id:"function-calling-vs-mcp",tabindex:"-1"},[n("Function Calling vs MCP "),l("a",{class:"header-anchor",href:"#function-calling-vs-mcp","aria-label":'Permalink to "Function Calling vs MCP"'},"​")],-1),l("p",null,"短视频里，总有人信誓旦旦认为，MCP 会取代 Function Calling ，这是真的吗？",-1),l("h2",{id:"_1-对-function-calling-的误解",tabindex:"-1"},[n("1. 对 Function Calling 的误解 "),l("a",{class:"header-anchor",href:"#_1-对-function-calling-的误解","aria-label":'Permalink to "1. 对 Function Calling 的误解"'},"​")],-1),l("p",null,[n("很多人对 Function Calling 的理解存在误区，比如像下图所示 "),l("img",{src:r,alt:"Function Calling",class:"content-image"})],-1),l("p",null,"如果是这样的话，那 Function Calling 和 MCP 是一样的，都是通过调用函数来执行任务。",-1),l("h2",{id:"_2-function-calling-真正的位置",tabindex:"-1"},[n("2. Function Calling 真正的位置 "),l("a",{class:"header-anchor",href:"#_2-function-calling-真正的位置","aria-label":'Permalink to "2. Function Calling 真正的位置"'},"​")],-1),l("p",null,"Function Calling 的真正位置应该是下图的蓝色框的部分，就是模型判断是否要调用工具的环节。 而真正调用工具的环节，也就是红色框的部分，是属于对工具的真正调用。MCP其实就是在红框这个部分的。",-1),l("img",{src:C,alt:"Function Calling",class:"content-image"},null,-1),l("h2",{id:"_3-mcp-与-function-calling-到底什么关系",tabindex:"-1"},[n("3. MCP 与 Function Calling 到底什么关系 "),l("a",{class:"header-anchor",href:"#_3-mcp-与-function-calling-到底什么关系","aria-label":'Permalink to "3. MCP 与 Function Calling 到底什么关系"'},"​")],-1),l("h3",{id:"_3-1-互补并存的关系",tabindex:"-1"},[n("3.1 互补并存的关系 "),l("a",{class:"header-anchor",href:"#_3-1-互补并存的关系","aria-label":'Permalink to "3.1 互补并存的关系"'},"​")],-1),l("p",null,"理解了上图中蓝框和红框的关系后，我们就能理解了MCP 和 Function Calling 的关系了。 其实，二者是互补的关系。 在同一个链路中，二者是可以并存的。",-1),l("p",null,"这里我找到一张图，大致展示了二者的不同。抛开之前我们说过的对 Function Calling 的误解，我们也能看到 MCP 和 Function Calling 的不同之处。",-1),l("img",{src:g,alt:"Function Calling",class:"content-image"},null,-1),l("h3",{id:"_3-2-功能定位不同",tabindex:"-1"},[n("3.2 功能定位不同 "),l("a",{class:"header-anchor",href:"#_3-2-功能定位不同","aria-label":'Permalink to "3.2 功能定位不同"'},"​")],-1),l("p",null,'Function Calling 是 LLM 的一种能力，它允许模型识别何时应该调用函数，并以结构化的方式生成函数调用参数。它是模型输出的一种特殊形式，本质上是模型对函数调用的"建议"。',-1),l("p",null,"MCP（Model Context Protocol）则是一个通信协议，它定义了 AI 系统与外部工具/服务之间的交互方式。MCP 提供了一个标准化的接口，使 AI 能够与各种本地运行的服务进行通信。",-1),l("h3",{id:"_3-2-工作流程不同",tabindex:"-1"},[n("3.2 工作流程不同 "),l("a",{class:"header-anchor",href:"#_3-2-工作流程不同","aria-label":'Permalink to "3.2 工作流程不同"'},"​")],-1),l("p",null,"Function Calling 的工作流程：",-1),l("ol",null,[l("li",null,"用户向 LLM 发送请求"),l("li",null,"LLM 分析请求并决定是否需要调用函数"),l("li",null,"LLM 生成函数名称和参数"),l("li",null,"应用程序接收这些信息并执行实际的函数调用"),l("li",null,"函数执行结果返回给 LLM"),l("li",null,"LLM 根据结果生成最终回复")],-1),l("p",null,"MCP 的工作流程：",-1),l("ol",null,[l("li",null,"用户向 AI 系统发送请求"),l("li",null,"AI 系统通过 MCP 与本地运行的服务器通信"),l("li",null,"本地服务器提供工具和资源"),l("li",null,"AI 系统使用这些工具和资源处理请求"),l("li",null,"AI 系统生成回复")],-1),l("h3",{id:"_3-2-互补关系",tabindex:"-1"},[n("3.2 互补关系 "),l("a",{class:"header-anchor",href:"#_3-2-互补关系","aria-label":'Permalink to "3.2 互补关系"'},"​")],-1),l("p",null,"Function Calling 和 MCP 并不是相互替代的关系，而是相互补充的：",-1),l("ol",null,[l("li",null,[l("strong",null,"能力层面"),n("：Function Calling 是模型的一种能力，而 MCP 是一种通信协议。")]),l("li",null,[l("strong",null,"集成方式"),n("：Function Calling 需要应用程序开发者实现函数并处理调用，MCP 则提供了标准化的接口，简化了集成过程。")]),l("li",null,[l("strong",null,"应用场景"),n("：Function Calling 适合于需要结构化输出的场景，而 MCP 适合于需要与本地服务交互的场景。")]),l("li",null,[l("strong",null,"组合使用"),n("：在实际应用中，可以将两者结合使用，例如 AI 系统可以通过 MCP 与本地服务通信，然后使用 Function Calling 来生成结构化的函数调用。")])],-1),l("h2",{id:"_4-mcp-架构",tabindex:"-1"},[n("4. MCP 架构 "),l("a",{class:"header-anchor",href:"#_4-mcp-架构","aria-label":'Permalink to "4. MCP 架构"'},"​")],-1),l("img",{src:p,alt:"MCP 架构",class:"content-image"},null,-1),l("h2",{id:"_5-mcp-的意义",tabindex:"-1"},[n("5. MCP 的意义 "),l("a",{class:"header-anchor",href:"#_5-mcp-的意义","aria-label":'Permalink to "5. MCP 的意义"'},"​")],-1),l("img",{src:h,alt:"MCP 前后对比",class:"content-image"},null,-1),l("h3",{id:"_5-1-mcp-带来的变革",tabindex:"-1"},[n("5.1 MCP 带来的变革 "),l("a",{class:"header-anchor",href:"#_5-1-mcp-带来的变革","aria-label":'Permalink to "5.1 MCP 带来的变革"'},"​")],-1),l("p",null,"MCP 为 AI 系统带来了以下几个方面的变革：",-1),l("ol",null,[l("li",null,[l("strong",null,"本地化处理"),n("：通过 MCP，AI 系统可以与本地运行的服务进行交互，减少了对云服务的依赖，提高了数据隐私和安全性。")]),l("li",null,[l("strong",null,"扩展能力"),n("：MCP 使 AI 系统能够访问更多的工具和资源，扩展了其处理问题的能力范围。")]),l("li",null,[l("strong",null,"标准化接口"),n("：MCP 提供了标准化的接口，简化了 AI 系统与外部工具/服务的集成过程。")]),l("li",null,[l("strong",null,"实时交互"),n("：通过 MCP，AI 系统可以与本地服务进行实时交互，提高了响应速度和用户体验。")])],-1),l("h3",{id:"_5-2-未来发展",tabindex:"-1"},[n("5.2 未来发展 "),l("a",{class:"header-anchor",href:"#_5-2-未来发展","aria-label":'Permalink to "5.2 未来发展"'},"​")],-1),l("p",null,"随着 AI 技术的发展，Function Calling 和 MCP 都将继续演进：",-1),l("ol",null,[l("li",null,"Function Calling 可能会支持更复杂的函数调用模式，如嵌套调用、条件调用等。"),l("li",null,"MCP 可能会扩展到支持更多类型的服务和资源，如硬件设备、专业软件等。"),l("li",null,"两者的集成将更加紧密，为开发者提供更强大的 AI 应用开发工具。")],-1),l("p",null,"总之，Function Calling 和 MCP 各自解决了 AI 系统不同层面的问题，它们共同构成了 AI 系统与外部世界交互的重要组成部分。",-1)])),_:1,__:[0]})])}const I=t(P,[["render",d]]);export{x as __pageData,I as default};
