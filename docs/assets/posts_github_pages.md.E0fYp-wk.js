import{_ as e,c as t,o as a,ae as s}from"./chunks/framework.hcSmgRPt.js";const n=JSON.parse('{"title":"使用 GitHub Pages 部署静态网页的网站","description":"如何使用 GitHub Pages 部署静态网页的网站","frontmatter":{"title":"使用 GitHub Pages 部署静态网页的网站","description":"如何使用 GitHub Pages 部署静态网页的网站","date":"2025-08-15T00:00:00.000Z","tags":["github","pages"]},"headers":[],"relativePath":"posts/github_pages.md","filePath":"posts/github_pages.md"}'),o={name:"posts/github_pages.md"};function l(u,i,r,c,b,d){return a(),t("div",null,i[0]||(i[0]=[s('<h1 id="使用-github-pages-部署静态网页的网站" tabindex="-1">使用 GitHub Pages 部署静态网页的网站 <a class="header-anchor" href="#使用-github-pages-部署静态网页的网站" aria-label="Permalink to &quot;使用 GitHub Pages 部署静态网页的网站&quot;">​</a></h1><h2 id="github-pages-是什么" tabindex="-1">GitHub Pages 是什么 <a class="header-anchor" href="#github-pages-是什么" aria-label="Permalink to &quot;GitHub Pages 是什么&quot;">​</a></h2><p>GitHub Pages 是 GitHub 提供的一项免费服务，用于托管静态网页。该服务于 2008 年推出，可谓是一个历史悠久的服务。</p><ul><li>你可以使用它来创建个人博客、展示项目或发布其他类型的静态内容</li><li>它是一项静态站点托管服务，直接从 GitHub 上获取 HTML、CSS 和 JavaScript 文件，然后发布网站</li><li>其原理是，GitHub 允许用户将仓库中的内容发布为在线网站</li><li>每个用户都会自动分配一个以用户名命名的特殊域名：<code>username.github.io</code></li><li>当你在 GitHub 上创建一个名为 <code>username.github.io</code> 的仓库，并将你的静态网页文件（如 HTML, CSS, JavaScript）推送到这个仓库时，GitHub Pages 就会自动将这些文件托管起来，并通过分配的域名提供访问</li><li>这使得用户可以轻松地拥有一个个人网站</li></ul><h2 id="部署静态内容网站的步骤" tabindex="-1">部署静态内容网站的步骤 <a class="header-anchor" href="#部署静态内容网站的步骤" aria-label="Permalink to &quot;部署静态内容网站的步骤&quot;">​</a></h2><ul><li>创建仓库：在 GitHub 上创建一个新的仓库。为了使用你的用户名作为网站地址（<code>username.github.io</code>），你需要创建一个名为 <code>username.github.io</code> 的仓库（将 <code>username</code> 替换为你的实际 GitHub 用户名）。</li><li>添加静态文件：将你的静态网页文件（如 index.html, style.css, script.js 等）添加到这个仓库中。你可以通过本地 Git 仓库推送文件，或者直接在 GitHub 网页上创建和上传文件 。</li><li>启用 GitHub Pages：进入你刚刚创建的仓库，点击 &quot;Settings&quot;（设置）选项卡。在左侧菜单中找到并点击 &quot;Pages&quot;（页面）。在 &quot;Pages&quot; 设置页面中，选择包含你网站文件的分支（通常是 main 或 master）和文件夹（例如 / (root)），然后点击 &quot;Save&quot;（保存）。这个操作会启用 GitHub Pages 服务。</li><li>等待部署：保存设置后，GitHub 会处理你的文件并部署网站。完成后，你会在设置页面看到一个绿色的消息，提示你的站点已发布，并提供访问网站的 URL（例如 <code>https://username.github.io</code>）。</li><li>你还可以选择使用 GitHub Actions 来自动化部署流程，或者配置自定义域名。</li></ul><h2 id="推荐的最佳实践" tabindex="-1">推荐的最佳实践 <a class="header-anchor" href="#推荐的最佳实践" aria-label="Permalink to &quot;推荐的最佳实践&quot;">​</a></h2><ul><li>使用 vitepress 快色构建网站</li><li>文章内容使用 md 格式</li><li>将原始文章保存在 docs-source/ 目录下</li><li>文章的侧边栏链接配置在 docs-source/.vitepress/config.ts</li><li>首页的文章列表由 node 执行脚本更新</li><li>编译后的内容保存在 docs 目录下</li><li>github 中 Pages 设置，指向 main 分支的 docs 目录</li><li>每次提交后，自动出发 github 默认的 Action 将 docs 目录下的内容发布到 pages 里</li></ul>',8)]))}const h=e(o,[["render",l]]);export{n as __pageData,h as default};
